from http import HTTPStatus

from commands import setup_database
from flask import Flask
from flask import request
from models import AppBundleOrm
from models import CpeOrm
from models import app_bundle_cpe_table
from sqlalchemy import or_
from sqlalchemy import select
from sqlalchemy import update
from sqlalchemy.dialects.postgresql import insert
from sqlalchemy.orm import selectinload

app = Flask(__name__)
session_maker = setup_database()


@app.route("/app_bundle", methods=["GET"])
def get_app_bundle():
    with session_maker() as session:
        select_app_bundle = (
            select(AppBundleOrm)
            .options(selectinload(AppBundleOrm.cpes))
            .where(
                or_(AppBundleOrm.verified.is_(False), AppBundleOrm.verified.is_(None))
            )
            .limit(1)
        )

        app_bundle = session.scalars(select_app_bundle).first()

        if not app_bundle:
            return {"message": "No app bundles to show"}, HTTPStatus.OK

    return {
        AppBundleOrm.id.name: app_bundle.id,
        AppBundleOrm.application_name.name: app_bundle.application_name,
        AppBundleOrm.version.name: app_bundle.version,
        AppBundleOrm.bundle_version.name: app_bundle.bundle_version,
        AppBundleOrm.obtained_from.name: app_bundle.obtained_from,
        AppBundleOrm.bundle_identifier.name: app_bundle.bundle_identifier,
        AppBundleOrm.process_name.name: app_bundle.process_name,
        AppBundleOrm.path.name: app_bundle.path,
        AppBundleOrm.verified.name: app_bundle.verified,
        "cpes": [cpe.uri for cpe in app_bundle.cpes],
    }, HTTPStatus.OK


@app.route("/app_bundle", methods=["PUT"])
def put_app_bundle():
    with session_maker() as session:
        request_json = request.get_json()
        cpe_uri = request_json.get("cpe_uri")
        app_bundle_id = request_json.get("app_bundle_id")

        if not validate_cpe_id(session, cpe_uri):
            return {"error": "CPE not found"}, HTTPStatus.NOT_FOUND
        else:
            update_app_bundle_cpe(session, cpe_uri, app_bundle_id)

        return {}, HTTPStatus.OK


def validate_cpe_id(session, cpe_uri):
    select_cpe = select(CpeOrm).where(CpeOrm.uri == cpe_uri)

    return bool(session.execute(select_cpe).first())


def update_app_bundle_cpe(session, cpe_uri, app_bundle_id):
    session.execute(
        update(AppBundleOrm)
        .where(AppBundleOrm.id == app_bundle_id)
        .values(**{AppBundleOrm.verified.name: True})
    )

    select_cpe = select(CpeOrm).where(CpeOrm.uri == cpe_uri)
    cpe = session.scalars(select_cpe).first()

    session.execute(
        insert(app_bundle_cpe_table)
        .values(
            **{
                app_bundle_cpe_table.columns.cpe_id.name: cpe.id,
                app_bundle_cpe_table.columns.app_bundle_id.name: app_bundle_id,
            }
        )
        .on_conflict_do_nothing()
    )

    session.commit()
