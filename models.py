from sqlalchemy import Column, Integer, String
from sqlalchemy.schema import ForeignKey, Identity
from sqlalchemy.ext.declarative import declarative_base
from pydantic import BaseModel, constr

Base = declarative_base()


# Table for that allows each vulnerable app on every device to be mapped to at least one cpe
class DeviceOrm(Base):
    __tablename__ = 'device_app_info'
    id = Column(Integer, Identity(always=True, start=1), primary_key=True, nullable=False)
    tenant_id = Column(String(100), index=True, nullable=False)
    device_id = Column(String(128), index=True, nullable=False)
    filepath = Column(String, nullable=False)
    cpe_row_id = Column(ForeignKey("cpes.id"), nullable=False)


class DeviceModel(BaseModel):
    id: int
    tenant_id: constr(max_length=100)
    device_id: constr(max_length=100)
    filepath: str
    cpe_row_id: int

    class Config:
        orm_mode = True


# Table that makes keeps track of CPEs and makes sure CPes are associated with at least one CVE
class CPEOrm(Base):
    __tablename__ = 'cpes'
    id = Column(Integer, Identity(always=True, start=1), primary_key=True, nullable=False)
    cpe_id = Column(String, index=True, nullable=False)
    cve_row_id = Column(ForeignKey("cves.cve_id"), nullable=False)


class CPEModel(BaseModel):
    id: int
    cpe_id: str
    cve_row_id: int

    class Config:
        orm_mode = True


# Table that simply keeps track of CVEs
class CVEOrm(Base):
    __tablename__ = 'cves'
    cve_id = Column(String, primary_key=True, nullable=False)
    severity = Column(String, nullable=False)
    version = Column(String, nullable=False)
    score = Column(String, index=True, nullable=False)


class CVEModel(BaseModel):
    cve_id: int
    severity: str
    severity: str
    score: str

    class Config:
        orm_mode = True
