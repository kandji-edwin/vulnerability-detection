POETRY ?= poetry
ROOT_DIR:=$(shell dirname $(realpath $(firstword $(MAKEFILE_LIST))))

PROTOBUF_DIR:=$(ROOT_DIR)/protobuf
PROTOBUF_BUILD_DIR:=$(PROTOBUF_DIR)/.build
protobuf-build:
	@rm -rf protobuf/ && \
	cp -r $(ROOT_DIR)/kandji-types/protobuf $(PROTOBUF_DIR) && \
	echo "\nBuilding protobufs..." && \
	mkdir -p $(PROTOBUF_BUILD_DIR)
	@for f in `find $(ROOT_DIR) -type f -name "grpc_requirements"`; do \
  		for name in `cat $${f}`; do \
  			echo "\t$(PROTOBUF_DIR)/$${name}.proto"; \
			(python3 -m grpc_tools.protoc -I $(ROOT_DIR) --grpc_python_out=$(PROTOBUF_BUILD_DIR) --python_out=$(PROTOBUF_BUILD_DIR) "$(PROTOBUF_DIR)/$${name}.proto" 2>/dev/null || \
			echo "\tCould not generate files for $${protobuf}"); \
  		done; \
  	done && \
	echo "\nCopying files..." && \
	for f in `find $(ROOT_DIR) -type f -name "grpc_requirements"`; do \
  		for name in `cat $${f}`; do \
  			mkdir -p $${f%/*}/protobuf/$$(echo $${name%/*}/ | tr - _); \
  			echo "\t$${name} --> $${f%/*}/protobuf/$$name/"; \
  			cp  $(PROTOBUF_BUILD_DIR)/protobuf/$$(echo $${name} | tr - _)_pb2.py $${f%/*}/protobuf/$$(echo $${name%/*}/ | tr - _); \
  			cp  $(PROTOBUF_BUILD_DIR)/protobuf/$$(echo $${name} | tr - _)_pb2_grpc.py $${f%/*}/protobuf/$$(echo $${name%/*}/ | tr - _); \
  		done; \
  		for d in `find $${f%/*}/protobuf -type d`; do \
  			touch $${d}/__init__.py; \
  		done; \
  	done && \
  	rm -rf protobuf/ && \
  	echo "Done!"

pre-commit:
	$(POETRY) run pre-commit install

run-pre-commit:
	$(POETRY) run pre-commit run --all-files

up:
	@make down && \
	git submodule update --recursive --remote && \
	docker compose up --build util && \
	docker compose up --build --remove-orphans -d detection_service $(args)

status:
	docker compose ps $(args)

logs:
	docker compose logs -f $(args)

down:
	docker compose down $(args)

psql:
	docker compose exec db psql -U postgres local_tenant

generate-migrations:
	docker compose exec detection_service alembic revision --autogenerate -m "$${m}"

run-migrations:
	docker compose exec detection_service alembic upgrade head

init-db:
	echo "SELECT 'CREATE DATABASE local_tenant' WHERE NOT EXISTS ( \
		SELECT FROM pg_database WHERE datname = 'local_tenant' \
	)\gexec" | docker compose exec db psql -U postgres && \
	make run-migrations

docker-util-commands:
	@make protobuf-build
