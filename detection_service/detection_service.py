import logging
from concurrent import futures

import grpc
from commands import setup
from device_data import DeviceData
from protobuf.vuln.v1 import vulnerabilities_pb2
from protobuf.vuln.v1 import vulnerabilities_pb2_grpc

setup()
logger = logging.getLogger()
device_data = DeviceData()


class Vulnerabilites(vulnerabilities_pb2_grpc.Vulnerabilities):
    def GetDeviceVulnerabilities(self, request, context):
        logger.debug(f'Received GetVulnerabilities with message "{request.device_id}"')
        response = device_data.get(request.device_id)

        return vulnerabilities_pb2.GetDeviceVulnerabilitiesResponse(
            cves=self.match_cves(response)
        )

    def match_cves(self, device_data):
        return [
            {
                "id": "1",
                "description": "cve description",
                "score": "1",
                "severity": "medium",
                "cpe": ["42"],
                "version": "1.3.0",
            }
        ]


def run_server():
    logger.info("Starting grpc server...")
    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))
    identification_servicer = Vulnerabilites()
    vulnerabilities_pb2_grpc.add_VulnerabilitiesServicer_to_server(
        identification_servicer, server
    )
    server.add_insecure_port("[::]:50051")
    server.start()
    logger.info("Server started. Waiting...")
    server.wait_for_termination()


if __name__ == "__main__":
    run_server()
