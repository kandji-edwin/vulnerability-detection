import logging
import os
from concurrent import futures
from dotenv import load_dotenv
import grpc
from commands import setup
from device_data import DeviceData
from protobuf.vuln.v1 import vulnerabilities_pb2
from protobuf.vuln.v1 import vulnerabilities_pb2_grpc
from postgres_models.models import DeviceOrm
from postgres_models.models import CPEOrm
from postgres_models.models import CVEOrm
from postgres_models.pydantic_types import DeviceModel
from postgres_models.pydantic_types import CPEModel
from postgres_models.pydantic_types import CVEModel

load_dotenv()
setup()
logger = logging.getLogger()
device_data = DeviceData()

from sqlalchemy import create_engine, select
from sqlalchemy.orm import sessionmaker

engine = create_engine(os.getenv("POSTGRES_WRITER_URI"))
Session = sessionmaker(engine)


class Vulnerabilites(vulnerabilities_pb2_grpc.Vulnerabilities):
    # Two cases - device specific and tenant specific
    def GetDeviceVulnerabilities(self, request, context):
        logger.debug(f'Received GetVulnerabilities with message "{request.device_id}"')
        if request.device_id is None:
            # Get all tenant vulnerabilities
            pass
        else:
            # Get all device vulnerabilities
            pass
        response = device_data.get(request.device_id)

        return vulnerabilities_pb2.GetDeviceVulnerabilitiesResponse(
            cves=self.match_cves(response)
        )

    # Get all devices for a specified vulnerability
    def GetDevicesForVulnerability(self, request, context):
        device_list = []
        with Session() as session:
            # This should return 1 row - the CVE in the request
            inner_stmt = select(CVEOrm).where(CVEOrm.cve_id == request.id)
            subq = inner_stmt.subquery()

            statement = select(DeviceOrm.device_id, DeviceOrm.tenant_id).join_from(
                subq, CPEOrm).join_from(CPEOrm, DeviceOrm).distinct()

            result = session.execute(statement).all()
            for res in result:
                device_list.append(
                    vulnerabilities_pb2.GetDevicesForVulnerabilityResponse.Device(tenant_id=res[0], device_id=res[1]))

        return vulnerabilities_pb2.GetDevicesForVulnerabilityResponse(results=device_list)


def run_server():
    logger.info("Starting grpc server...")
    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))
    identification_servicer = Vulnerabilites()
    vulnerabilities_pb2_grpc.add_VulnerabilitiesServicer_to_server(
        identification_servicer, server
    )
    server.add_insecure_port("[::]:50051")
    server.start()
    logger.info("Server started. Waiting...")
    server.wait_for_termination()


if __name__ == "__main__":
    run_server()
