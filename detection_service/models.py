from sqlalchemy import Boolean
from sqlalchemy import Column
from sqlalchemy import DateTime
from sqlalchemy import Index
from sqlalchemy import Integer
from sqlalchemy import String
from sqlalchemy import Table
from sqlalchemy import UniqueConstraint
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship
from sqlalchemy.schema import ForeignKey

Base = declarative_base()

# App Bundle <-> CPE m2m
app_bundle_cpe_table = Table(
    "app_bundle_cpe",
    Base.metadata,
    Column("app_bundle_id", ForeignKey("app_bundle.id"), primary_key=True),
    Column("cpe_id", ForeignKey("cpe.id"), primary_key=True),
)


# Table that keeps track of which CPEs are associated with which CVEs
class CpeCveMatchOrm(Base):
    __tablename__ = "cpe_cve_match"
    cpe_id = Column(ForeignKey("cpe.id"), primary_key=True)
    cve_id = Column(ForeignKey("cve.id"), primary_key=True)

    cpe = relationship("CpeOrm", back_populates="cves")
    cve = relationship("CveOrm", back_populates="cpes")


# Table to map devices to which bundles they have installed
class DeviceAppInfoOrm(Base):
    __tablename__ = "device_app_info"

    id = Column(Integer, primary_key=True)
    tenant_id = Column(String(100), index=True, nullable=False)
    device_id = Column(String(128), index=True, nullable=False)
    app_bundle_id = Column(
        ForeignKey("app_bundle.id", ondelete="SET NULL"),
        nullable=False,
        index=True,
    )


# Table that keeps track of seen application bundles the agent sends info on and what CPEs those bundles correspond to
class AppBundleOrm(Base):
    __tablename__ = "app_bundle"
    __table_args__ = (UniqueConstraint("bundle_identifier", "bundle_version"),)

    id = Column(Integer, primary_key=True)
    application_name = Column(String, nullable=False)
    version = Column(String, nullable=False)
    bundle_version = Column(String, nullable=False)
    obtained_from = Column(String, nullable=False)
    bundle_identifier = Column(String, nullable=False)
    process_name = Column(String, nullable=False)
    path = Column(String, nullable=False)
    os = Column(String, nullable=True)
    # Null if hasn't been matched to CPE, False if not human verified, True if human verified
    verified = Column(Boolean, nullable=True)
    vendor_id = Column(
        ForeignKey("vendor.id", ondelete="SET NULL"),
        nullable=True,
        index=True,
    )

    vendor = relationship("VendorOrm", back_populates="app_bundles")
    cpes = relationship(
        "CpeOrm", secondary=app_bundle_cpe_table, back_populates="app_bundles"
    )


# Table that keeps track of CPEs
class CpeOrm(Base):
    __tablename__ = "cpe"
    # Index for vendor/product/version - for use when trying to match a new app with a cpe
    __table_args__ = (
        Index("ix_cpe_vendor_product_version", "vendor", "product", "version"),
    )

    id = Column(Integer, primary_key=True)
    uri = Column(String, nullable=False, unique=True, index=True)
    cpe_version_prefix = Column(String, nullable=False, server_default="")
    part = Column(String, nullable=False, server_default="")
    vendor = Column(String, nullable=False, server_default="")
    product = Column(String, nullable=False, server_default="")
    version = Column(String, nullable=False, server_default="")
    update = Column(String, nullable=False, server_default="")
    edition = Column(String, nullable=False, server_default="")
    language = Column(String, nullable=False, server_default="")
    software_edition = Column(String, nullable=False, server_default="")
    target_software = Column(String, nullable=False, server_default="")
    target_hardware = Column(String, nullable=False, server_default="")
    other = Column(String, nullable=False, server_default="")

    app_bundles = relationship(
        "AppBundleOrm", secondary=app_bundle_cpe_table, back_populates="cpes"
    )
    cves = relationship("CpeCveMatchOrm", back_populates="cpe")

    @staticmethod
    def new_from_uri(uri):
        return CpeOrm(**CpeOrm.parse_cpe_23(uri))

    # Assumes that cpe_str matches regex in https://csrc.nist.gov/schema/cpe/2.3/cpe-naming_2.3.xsd
    @staticmethod
    def parse_cpe_23(cpe_str: str):
        split_cpe = cpe_str.split(":")
        cpe_elements = [cpe_str] + [f"{split_cpe[0]}:{split_cpe[1]}"] + split_cpe[2:]
        columns = [col for col in CpeOrm.__table__.columns if col != CpeOrm.id]

        return {column.key: cpe_part for column, cpe_part in zip(columns, cpe_elements)}


# Table that keeps track of CVEs
class CveOrm(Base):
    __tablename__ = "cve"

    id = Column(Integer, primary_key=True)
    cve_id = Column(String, index=True, nullable=False)
    severity = Column(String, nullable=True)
    version = Column(String, nullable=True)
    score = Column(String, index=True, nullable=True)
    description = Column(String, nullable=True)
    published_date = Column(DateTime, nullable=False)
    last_modified_date = Column(DateTime, nullable=False)

    cpes = relationship("CpeCveMatchOrm", back_populates="cve")


class ReferenceDataOrm(Base):
    __tablename__ = "reference_data"
    __table_args__ = (UniqueConstraint("url", "cve_id"),)

    id = Column(Integer, primary_key=True)
    url = Column(String, nullable=False)
    cve_id = Column(
        ForeignKey("cve.id", ondelete="CASCADE"),
        nullable=False,
        index=True,
    )


class ReferenceDataTagOrm(Base):
    __tablename__ = "reference_data_tag"

    id = Column(Integer, primary_key=True)
    tag = Column(String, nullable=False)
    reference_data_id = Column(
        ForeignKey("reference_data.id", ondelete="CASCADE"), nullable=False, index=True
    )


class VendorOrm(Base):
    __tablename__ = "vendor"
    id = Column(Integer, primary_key=True)
    name = Column(String, nullable=True)
    team_identifier = Column(String, nullable=True)

    app_bundles = relationship("AppBundleOrm", back_populates="vendor")
