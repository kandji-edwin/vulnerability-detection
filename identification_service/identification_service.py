import json
import logging
from concurrent import futures

import grpc
from commands import setup
from device_data import DeviceData
from protobuf.vulnerability_identification.v1 import identification_pb2
from protobuf.vulnerability_identification.v1 import identification_pb2_grpc

setup()
logger = logging.getLogger()
device_data = DeviceData()


class VulnerabilityIdentification(identification_pb2_grpc.VulnerabilityIdentification):
    def IdentifyVulnerabilities(self, request, context):
        logger.debug(
            f'Received IdentifyVulnerabilities with message "{request.device_id}"'
        )
        response = device_data.get(request.device_id)

        return identification_pb2.IdentificationResponse(response=json.dumps(response))


def run_server():
    logger.info("Starting grpc server...")
    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))
    identification_servicer = VulnerabilityIdentification()
    identification_pb2_grpc.add_VulnerabilityIdentificationServicer_to_server(
        identification_servicer, server
    )
    server.add_insecure_port("[::]:50051")
    server.start()
    logger.info("Server started. Waiting...")
    server.wait_for_termination()


if __name__ == "__main__":
    run_server()
